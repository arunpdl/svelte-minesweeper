{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Board.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Board from \"./Board/Board.svelte\";\n</script>\n\n<style>\n  main {\n    text-align: center;\n    align-content: center;\n    padding: 1em;\n    max-width: 500px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    margin: 15px;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n    color: #ff3e00;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>Minesweeper</h1>\n  <Board />\n</main>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { fade } from \"svelte/transition\";\n\n  let squares = [],\n    width = 10,\n    bombAmount = 20,\n    flags = 0,\n    isGameOver = false,\n    isGameWon = false;\n\n  const createBoard = () => {\n    const gameArray = [\n      ...Array(bombAmount).fill(\"bomb\"),\n      ...Array(width * width - bombAmount).fill(\"valid\"),\n    ];\n\n    const shuffledArray = gameArray.sort(() => Math.random() - 0.5);\n\n    for (let i = 0; i < width * width; i++) {\n      squares.push({\n        id: i,\n        status: shuffledArray[i],\n        checked: false,\n        flagged: false,\n      });\n    }\n\n    for (let i = 0; i < squares.length; i++) {\n      let totalBombs = 0;\n      const isLeftEdge = i % width === 0;\n      const isRightEdge = i % width === width - 1;\n\n      if (squares[i].status === \"valid\") {\n        if (i > 0 && !isLeftEdge && squares[i - 1].status === \"bomb\")\n          totalBombs++;\n        if (i > 9 && !isRightEdge && squares[i + 1 - width].status === \"bomb\")\n          totalBombs++;\n        if (i > 10 && squares[i - width].status === \"bomb\") totalBombs++;\n        if (i > 11 && !isLeftEdge && squares[i - 1 - width].status === \"bomb\")\n          totalBombs++;\n        if (i < 98 && !isRightEdge && squares[i + 1].status === \"bomb\")\n          totalBombs++;\n        if (i < 90 && !isLeftEdge && squares[i - 1 + width].status === \"bomb\")\n          totalBombs++;\n        if (i < 88 && !isRightEdge && squares[i + 1 + width].status === \"bomb\")\n          totalBombs++;\n        if (i < 89 && squares[i + width].status === \"bomb\") totalBombs++;\n\n        squares[i].totalBombs = totalBombs;\n      }\n    }\n  };\n\n  createBoard();\n\n  const handleClickSquare = (square) => {\n    if (isGameOver) return;\n    if (square.checked || square.flagged) return;\n    if (square.status === \"bomb\") {\n      gameOver(square);\n      return;\n    } else {\n      if (square.totalBombs !== 0) {\n        squares[square.id].checked = true;\n        return;\n      }\n      checkSquare(square, square.id);\n    }\n    squares[square.id].checked = true;\n    checkForWin();\n  };\n\n  const checkSquare = (square, currentId) => {\n    const isLeftEdge = currentId % width === 0;\n    const isRightEdge = currentId % width === width - 1;\n    setTimeout(() => {\n      if (currentId > 0 && !isLeftEdge) {\n        const newId = currentId - 1;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId > 0 && !isRightEdge) {\n        const newId = currentId + 1 - width;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId > 10) {\n        const newId = currentId - width;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId > 11 && !isLeftEdge) {\n        const newId = currentId - 1 - width;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId < 98 && !isRightEdge) {\n        const newId = currentId + 1;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId < 90 && !isLeftEdge) {\n        const newId = currentId - 1 + width;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId < 88 && !isRightEdge) {\n        const newId = currentId + 1 + width;\n        handleClickSquare(squares[newId]);\n      }\n\n      if (currentId < 89) {\n        const newId = currentId + width;\n        handleClickSquare(squares[newId]);\n      }\n    }, 10);\n  };\n\n  const addFlag = (square) => {\n    if (isGameOver) return;\n    if (!square.checked && flags < bombAmount) {\n      if (!square.flagged) {\n        squares[square.id].flagged = true;\n        flags++;\n      } else {\n        squares[square.id].flagged = false;\n        flags--;\n      }\n    }\n    checkForWin();\n  };\n\n  const gameOver = (square) => {\n    squares[square.id].checked = true;\n    isGameOver = true;\n    squares.forEach((eachSquare) => {\n      if (eachSquare.status === \"bomb\") {\n        eachSquare.checked = true;\n        eachSquare.flagged = false;\n      }\n    });\n  };\n\n  const checkForWin = () => {\n    let matches = 0;\n    console.log(\"clheck\");\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i].flagged && squares[i].status === \"bomb\") matches++;\n      if (matches === bombAmount) {\n        console.log(\"You win\");\n        isGameOver = true;\n        isGameWon = true;\n      }\n    }\n  };\n\n  const getNumberClass = (total) => {\n    switch (total) {\n      case 1:\n        return \"one\";\n      case 2:\n        return \"two\";\n      case 3:\n        return \"three\";\n      case 4:\n        return \"four\";\n      case 5:\n        return \"five\";\n      default:\n        return \"\";\n    }\n  };\n\n  const resetGame = () => {\n    (squares = []),\n      (width = 10),\n      (bombAmount = 20),\n      (flags = 0),\n      (isGameWon = false),\n      (isGameOver = false);\n    createBoard();\n  };\n</script>\n\n<style>\n  .container {\n    display: inline-block;\n  }\n\n  .grid {\n    height: 600px;\n    width: 600px;\n    display: flex;\n    flex-wrap: wrap;\n    background-color: #cdcdcd;\n    border: 10px dashed #666666;\n  }\n\n  .grid div {\n    height: 60px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .valid {\n    box-sizing: border-box;\n    border: 5px outset #666666;\n  }\n\n  .bomb {\n    /* background-color: #ff3e00; */\n    box-sizing: border-box;\n    border: 5px outset #666666;\n  }\n\n  .checked {\n    background-color: black;\n    border: 5px inset #666666;\n  }\n\n  .content {\n    font-size: 28px;\n    font-weight: 600;\n  }\n\n  .one {\n    color: blue;\n  }\n\n  .two {\n    color: green;\n  }\n\n  .three {\n    color: yellow;\n  }\n\n  .four {\n    color: purple;\n  }\n\n  .five {\n    color: red;\n  }\n\n  h2 {\n    text-transform: uppercase;\n    font-size: 2em;\n    font-weight: 100;\n    color: #ff3e00;\n  }\n\n  .reset {\n    display: inline;\n    border: 2px solid red;\n    padding: 10px 10px;\n    box-sizing: border-box;\n    font-size: 16px;\n    font-weight: 200;\n    cursor: pointer;\n    text-transform: uppercase;\n  }\n\n  .reset:hover {\n    background-color: antiquewhite;\n  }\n\n  .menu {\n    margin-top: 20px;\n  }\n\n  .flag-count {\n    margin-top: 15px;\n  }\n</style>\n\n<div class=\"container\">\n  <div>\n    <div class=\"grid\">\n      {#each squares as square (square.id)}\n        <div\n          id={square.id}\n          class={`${square.status} ${square.checked ? 'checked' : ''} ${getNumberClass(square.totalBombs)}`}\n          on:click={() => handleClickSquare(square)}\n          on:contextmenu={(e) => {\n            e.preventDefault();\n            addFlag(square);\n          }}>\n          {#if square.checked && square.totalBombs && square.totalBombs !== 0}\n            <span class=\"content\" transition:fade>{square.totalBombs}</span>\n          {/if}\n          {#if isGameOver && !isGameWon && square.status === 'bomb'}\n            <span class=\"content \" transition:fade>ðŸ’£</span>\n          {/if}\n          {#if square.flagged}\n            <span class=\"content\" transition:fade>ðŸš©</span>\n          {/if}\n        </div>\n      {/each}\n    </div>\n    <div class=\"flag-count\">\n      <span>Flags: {flags}</span>\n    </div>\n  </div>\n  <div class=\"menu\">\n    {#if isGameOver}\n      {#if isGameWon}\n        <h2 transition:fade>You Won!</h2>\n      {:else}\n        <h2 transition:fade>Game Over</h2>\n      {/if}\n    {/if}\n    <div class=\"reset\" on:click={resetGame}>Reset</div>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKE,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,aAAa,CAAE,MAAM,CACrB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;ACiKD,UAAU,4BAAC,CAAC,AACV,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,IAAI,CAAC,MAAM,CAAC,OAAO,AAC7B,CAAC,AAED,mBAAK,CAAC,GAAG,cAAC,CAAC,AACT,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,OAAO,AAC5B,CAAC,AAED,KAAK,4BAAC,CAAC,AAEL,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,OAAO,AAC5B,CAAC,AAED,QAAQ,4BAAC,CAAC,AACR,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC3B,CAAC,AAED,QAAQ,4BAAC,CAAC,AACR,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,IAAI,4BAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,IAAI,4BAAC,CAAC,AACJ,KAAK,CAAE,KAAK,AACd,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,KAAK,CAAE,MAAM,AACf,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,KAAK,CAAE,MAAM,AACf,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,EAAE,4BAAC,CAAC,AACF,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,GAAG,CACrB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,UAAU,CAAE,UAAU,CACtB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,OAAO,CACf,cAAc,CAAE,SAAS,AAC3B,CAAC,AAED,kCAAM,MAAM,AAAC,CAAC,AACZ,gBAAgB,CAAE,YAAY,AAChC,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,WAAW,4BAAC,CAAC,AACX,UAAU,CAAE,IAAI,AAClB,CAAC"
}